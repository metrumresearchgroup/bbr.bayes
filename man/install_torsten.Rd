% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/install_torsten.R
\name{install_torsten}
\alias{install_torsten}
\title{Install Torsten}
\usage{
install_torsten(
  dir = NULL,
  cores = getOption("mc.cores", 2),
  quiet = FALSE,
  overwrite = FALSE,
  timeout = 1200,
  version = NULL,
  release_url = NULL,
  cpp_options = list(),
  check_toolchain = TRUE
)
}
\arguments{
\item{dir}{(string) The path to the directory in which to install Torsten
The default is to install it in a directory with a name generated by
\code{file.path(tools::R_user_dir("torsten"))}.}

\item{cores}{(integer) The number of CPU cores to use to parallelize building
CmdStan and speed up installation. If \code{cores} is not specified then the
default is to look for the option \code{"mc.cores"}, which can be set for an
entire \R session by \code{options(mc.cores=value)}. If the \code{"mc.cores"} option
has not been set then the default is \code{2}.}

\item{quiet}{(logical) Should the verbose output
from the system processes be suppressed when building the Torsten binaries?
The default is \code{FALSE}.}

\item{overwrite}{(logical) Should Torsten still be downloaded and installed
even if an installation of the same version is found in \code{dir}? The default
is \code{FALSE}, in which case an informative error is thrown instead of
overwriting the user's installation.}

\item{timeout}{(positive real) Timeout (in seconds) for the build stage of
the installation.}

\item{version}{(string) The Torsten release version to install. The default
is \code{NULL}, which downloads the latest stable release from
\url{https://github.com/metrumresearchgroup/Torsten/releases}.}

\item{release_url}{(string) The URL for the specific Torsten release or
release candidate to install. See \url{https://github.com/metrumresearchgroup/Torsten/releases}.
The URL should point to the tarball (\code{.tar.gz} file) itself, e.g.,
\code{release_url="https://github.com/metrumresearchgroup/Torsten/archive/refs/tags/torsten_v0.90.0.tar.gz"}.
If both \code{version} and \code{release_url} are specified then \code{version} will be used.}

\item{cpp_options}{(list) Any makefile flags/variables to be written to
the \code{make/local} file. For example, \code{list("CXX" = "clang++")} will force
the use of clang for compilation.}

\item{check_toolchain}{(logical) Should \code{install_torsten()} attempt to check
that the required toolchain is installed and properly configured. The
default is \code{TRUE}.}
}
\description{
The \code{install_torsten()} function attempts to download and
install the latest release of \href{https://github.com/metrumresearchgroup/Torsten/releases/latest}{Torsten}.
Installing a previous release or a new release candidate is also possible
by specifying the \code{version} or \code{release_url} argument.
See the first few sections of the CmdStan
\href{https://mc-stan.org/docs/cmdstan-guide/cmdstan-installation.html}{installation guide}
for details on the C++ toolchain required for installing CmdStan.
\code{install_torsten()} does not automatically append to \code{cpp_options} for M1 Macs. It also
does not provide support for WSL.
}
\examples{
\dontrun{
install_torsten(cores = 4)

cpp_options <- list(
  "CXX" = "clang++",
  "CXXFLAGS+= -march=native",
  PRECOMPILED_HEADERS = TRUE
)
install_torsten(cores = 4, cpp_options = cpp_options)
}

}
